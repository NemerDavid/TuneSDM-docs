[{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"launching-the-app","dir":"Articles","previous_headings":"","what":"Launching the App","title":"Welcome to TuneSDM App","text":"R tun following codes launch app","code":"install your package: remotes::install_github(\"NemerDavid/tunesdm-app\")  library(TuneSDM) TuneSDM::run_TuneSDM()"},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"occurrence-data","dir":"Articles","previous_headings":"","what":"Occurrence Data","title":"Welcome to TuneSDM App","text":"Uploaded occurrence data must follow structure: Longitude (X) Latitude (Y) Species name (e.g., Zamia prasina) Presence/absence (1 = presence, 0 = absence) coordinate system must WGS84 (EPSG:4326) decimal degrees. Column names flexible, order must strictly followed. file successfully loaded, species presence points can visualized Map Occurrence tab help validate geographic locations.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"environmental-data","dir":"Articles","previous_headings":"","what":"Environmental Data","title":"Welcome to TuneSDM App","text":"section guides formatting environmental predictor layers correctly uploading. data must loaded SpatRaster object using terra package R. contain predictor variables stacked single multi-layer raster file (e.g., .tif format). raster file must satisfy following requirements: layers must share spatial resolution, extent, coordinate reference system (CRS). CRS must WGS84 (EPSG:4326) decimal degrees. file format .tif. Avoid .asc formats without embedded CRS metadata. layer short, interpretable name (e.g., bio1, bio12, slope). selecting file, wait upload marked ‘Upload complete’ clicking Load Climate Data. selecting file, wait upload marked ‘Upload complete’ clicking Load Climate Data.  loading raster stack, app summarizes key statistics (min, max, median, NA count, etc.) predictor. Use assess variable ranges, identify missing data, detect anomalies. , can select subset predictors species individually. allows tailored modeling. example, tropical tree cold-adapted carnivore may need different variables.  may choose assign set predictors multiple species.","code":"library(terra) file_path <- 'path/to/your/predictors.tif' envs <- rast(file_path) crs(envs) # should return 'EPSG:4326'"},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"model-tuning","dir":"Articles","previous_headings":"","what":"Model Tuning","title":"Welcome to TuneSDM App","text":"Tune SDM Models section lets fine-tune Species Distribution Models (SDMs) species algorithm independently, using Bayesian optimization via tune_bayes() function tidymodels ecosystem. can choose one algorithms (e.g., rf, gbm, svm, etc.), app tune one individually. Supported models: Random Forest (rf) XGBoost (gbm) Support Vector Machines (SVM) Maximum Entropy (Maxent) Neural Network (nnet) Generalized Additive Model (GAM) Generalized Linear Model quadratic terms capture non-linearity (GLMsq) Multivariate Adaptive Regression Splines (MARS) K-Nearest Neighbors (KNN) model tuned using resampling (e.g., k-fold cross-validation) find best hyperparameters. can customize process using following options: Initial search size: Number random models evaluate starting Bayesian search. Number iterations: Number optimization rounds initial search. Proportion training data: Fraction full dataset used train models (remaining used testing). Number folds: Number resampling folds used cross-validation. Use parallel: Enable multi-core tuning using future package. Seed: Set random seed reproducibility. Use 0 seed, positive number ensure reproducible results. Number cores: Controls many processor cores use parallelization enabled. Use Weights: Apply optional weighting scheme presence/absence imbalance. Specifically, weights calculated comparing number presence (1) absence (0) observations: presences fewer, presence point given higher weight balance influence. absences fewer, opposite applied. user can activate deactivate weighting behavior toggling use_weights parameter. example, 100 absences 20 presences, weights : weight_presences = total_absences / total_presences = 100 / 20 = 5 weight_absences = 1 # default baseline means presence observation treated 5 times important absence, helping correct class imbalance model fitting. tuning complete, following visualizations become available:  - Tuning Results: Summary plots showing performance across iterations models. - Tuning Parameters Table: full table tuned parameter combinations metrics. - Single Model Metrics: Visualization individual hyperparameters affect model performance. - ROC-AUC Plot: ROC curves based best-tuned model. - Response Curves: Partial dependence plots showing variable influence predictions.   information optimization algorithm, see tune_bayes() documentation.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"ensemble-modeling","dir":"Articles","previous_headings":"","what":"Ensemble Modeling","title":"Welcome to TuneSDM App","text":"ensemble module provides flexible robust way combine best-performing models unified prediction. model tuning, multiple candidate models (e.g., rf, gbm, svm, etc.) available species. Ensemble modeling helps increase stability accuracy leveraging models meet specified performance standard. Selective Inclusion Based Performance can define performance threshold (e.g., ROC-AUC ≥ 0.85), app : Filter trained models across folds configurations. Retain models exceed threshold individual fold performance. Discard poorly performing models, even belong algorithm (e.g., 3 5 Random Forest models might retained). selective process ensures ensemble robust focused reliability. Customize Ensemble can interactively control ensemble process : Adjusting performance threshold — either globally species individually per species. Manually selecting models species include. Visualizing ensemble performance test set ROC-AUC curves. assign different thresholds different species: Select species dropdown. Adjust threshold slider. Click “Save one species” apply value. Repeat species. Alternatively, apply threshold species, adjust slider click “Apply ”. thresholds set models selected, click “Run Ensemble” generate predictions. predictions used : Model evaluation Climate scenario transfer Final suitability mapping Ensemble? ensemble combines top-performing individual model predictions unified output, improving predictive stability ecological interpretability.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"model-transfer","dir":"Articles","previous_headings":"","what":"Model Transfer","title":"Welcome to TuneSDM App","text":"species distribution models (SDMs) trained, Model Transfer module enables project onto new environmental spatial conditions — future climate scenarios novel geographic regions. essential understanding species suitability may shift changing environments. Input Data: .tif file uploaded earlier Env Data section automatically reused . need re-upload unless wish explore new scenario (e.g., future climate layers different region). uploading new scenario stack: Ensure follows layer names, order, format training dataset. Spatial Cropping Options can define area model transfer using one four cropping methods: Draw Extent: Manually draw polygons map. can assign unique extents per species. Select Countries: Clip predictions using official country boundaries. Upload Shapefile: Use polygon shapefile (e.g., custom region interest). Crop: Skip cropping raster stack already trimmed target region. cropping method can : Applied globally species, Customized individually per species using action buttons (e.g., Apply Drawn Extent Species). Species Model Selection can choose : Transfer predictions one multiple species. Include selected models (e.g., RF GLM) final output. Ensemble Filtering enabled, ensemble predictions generated combining model outputs using specified method : mean median Even ensemble mode active, individual model predictions always computed available. Binarization Options: may convert continuous suitability scores binary (presence/absence) maps using: Quantile Minimum Training Presence: e.g., setting threshold 0.05 excludes lowest 5% predicted suitability values known presence locations. method allows biologically conservative predictions, especially useful long-lived species like trees. Max Sensitivity + Specificity Threshold: default method always included, producing binary predictions optimized classification accuracy. Transfer Models? step helps explore model behavior novel contexts — future climate, new territories, ecological restoration zones — providing critical insights conservation climate adaptation planning.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"visualizing-model-predictions","dir":"Articles","previous_headings":"","what":"Visualizing Model Predictions","title":"Welcome to TuneSDM App","text":"section enables visualize outputs generated SDMs, either individual models ensemble predictions, across various environmental scenarios. Can Visualize can select: species interest prediction type (e.g., continuous binary) model ensemble configuration available prediction types include: Proba: Continuous probability values ranging 0 1. Max_Sens_Spec_binary: Binary map using threshold maximizes sensitivity specificity. Min_training_binary: Binary map using minimum predicted value presence training locations. Ens_*: Ensemble versions , available ensemble modeling applied. Note: Max Sensitivity + Specificity threshold always computed applied default binarization. binary version included automatically visual outputs. Interpreting Maps visualizations allow assess spatial patterns predicted suitability: current conditions future scenarios individual models versus ensemble predictions comparing spatial outputs, can evaluate model consensus thresholding impact interpretation habitat suitability across landscape.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/articles/getting_started.html","id":"support","dir":"Articles","previous_headings":"","what":"Support","title":"Welcome to TuneSDM App","text":"Need help? Contact developer.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Nemer. Author, maintainer.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nemer D (2025). TuneSDM: SDM Visualization Tuning App. R package version 0.1.0.","code":"@Manual{,   title = {TuneSDM: SDM Visualization and Tuning App},   author = {David Nemer},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://NemerDavid.github.io/TuneSDM-app/index.html","id":"id_-demo-video","dir":"","previous_headings":"","what":"🎬 Demo Video","title":"TuneSDM","text":"can watch demo TuneSDM clicking “watch demo”: 👉 Watch demo","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/index.html","id":"id_-getting-started","dir":"","previous_headings":"","what":"📖 Getting Started","title":"TuneSDM","text":"Ready use TuneSDM? 👉 Head Get Started guide learn run app prepare data.","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/reference/run_TuneSDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch the TuneSDM Shiny App — run_TuneSDM","title":"Launch the TuneSDM Shiny App — run_TuneSDM","text":"Launch TuneSDM Shiny App","code":""},{"path":"https://NemerDavid.github.io/TuneSDM-app/reference/run_TuneSDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch the TuneSDM Shiny App — run_TuneSDM","text":"","code":"run_TuneSDM()"}]
